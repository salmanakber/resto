
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  restaurantName: 'restaurantName',
  status: 'status',
  roleId: 'roleId',
  profileImage: 'profileImage',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  phoneNumber: 'phoneNumber',
  phoneVerified: 'phoneVerified',
  otp: 'otp',
  cuisine: 'cuisine',
  otpExpires: 'otpExpires',
  otpEnabled: 'otpEnabled',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  googleId: 'googleId',
  facebookId: 'facebookId',
  otpTries: 'otpTries',
  restaurantId: 'restaurantId',
  locationId: 'locationId',
  customerType: 'customerType',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  displayName: 'displayName',
  access_area: 'access_area',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  device: 'device',
  location: 'location',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  variables: 'variables',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gender: 'gender',
  preferences: 'preferences',
  language: 'language',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  isDefault: 'isDefault',
  streetAddress: 'streetAddress',
  apartment: 'apartment',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  userId: 'userId',
  address: 'address',
  totalSpent: 'totalSpent',
  totalOrders: 'totalOrders',
  lastOrderDate: 'lastOrderDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loyaltyPoints: 'loyaltyPoints',
  restaurantId: 'restaurantId',
  status: 'status'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentMethodId: 'paymentMethodId',
  type: 'type',
  provider: 'provider',
  isDefault: 'isDefault',
  cardNumber: 'cardNumber',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  cardHolderName: 'cardHolderName',
  billingAddress: 'billingAddress',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  dineInCustomer: 'dineInCustomer',
  orderNumber: 'orderNumber',
  status: 'status',
  totalAmount: 'totalAmount',
  currency: 'currency',
  paymentStatus: 'paymentStatus',
  paymentMethodId: 'paymentMethodId',
  shippingAddress: 'shippingAddress',
  billingAddress: 'billingAddress',
  items: 'items',
  notes: 'notes',
  trackingNumber: 'trackingNumber',
  estimatedDelivery: 'estimatedDelivery',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tableId: 'tableId',
  paymentDetails: 'paymentDetails',
  customerDetails: 'customerDetails',
  orderType: 'orderType',
  pickupTime: 'pickupTime',
  specialInstructions: 'specialInstructions',
  otp: 'otp',
  qrCode: 'qrCode',
  locationId: 'locationId',
  customerId: 'customerId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.MenuCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isActive: 'isActive',
  order: 'order',
  parentId: 'parentId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  image: 'image',
  tags: 'tags',
  isAvailable: 'isAvailable',
  isPopular: 'isPopular',
  calories: 'calories',
  order: 'order',
  prepTime: 'prepTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  isActive: 'isActive',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemServiceScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  serviceId: 'serviceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  menuItemId: 'menuItemId',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.ITAccessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiryDate: 'expiryDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  role: 'role',
  joiningDate: 'joiningDate',
  position: 'position',
  department: 'department',
  typeLeave: 'typeLeave',
  note: 'note',
  salary: 'salary',
  hireDate: 'hireDate',
  status: 'status',
  createdAt: 'createdAt',
  leaveStartDate: 'leaveStartDate',
  leaveEndDate: 'leaveEndDate',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  month: 'month',
  year: 'year',
  baseSalary: 'baseSalary',
  overtimePay: 'overtimePay',
  tipsAmount: 'tipsAmount',
  deductions: 'deductions',
  netSalary: 'netSalary',
  status: 'status',
  paymentDate: 'paymentDate',
  payslipUrl: 'payslipUrl',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OvertimeScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  date: 'date',
  month: 'month',
  year: 'year',
  hours: 'hours',
  rate: 'rate',
  amount: 'amount',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TipScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  date: 'date',
  month: 'month',
  year: 'year',
  amount: 'amount',
  type: 'type',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeductionScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  type: 'type',
  amount: 'amount',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  month: 'month',
  year: 'year',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  month: 'month',
  year: 'year',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  timeZone: 'timeZone',
  address: 'address',
  lat: 'lat',
  lng: 'lng',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  number: 'number',
  status: 'status',
  capacity: 'capacity',
  qrCode: 'qrCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  restaurantId: 'restaurantId'
};

exports.Prisma.KitchenOrderScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  restaurantId: 'restaurantId',
  staffId: 'staffId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoyaltyPointScalarFieldEnum = {
  id: 'id',
  points: 'points',
  type: 'type',
  expiresAt: 'expiresAt',
  userId: 'userId',
  orderId: 'orderId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  emailNotifications: 'emailNotifications',
  orderNotifications: 'orderNotifications',
  marketingNotifications: 'marketingNotifications',
  systemNotifications: 'systemNotifications',
  pushNotifications: 'pushNotifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecuritySettingsScalarFieldEnum = {
  id: 'id',
  twoFactorAuth: 'twoFactorAuth',
  sessionTimeout: 'sessionTimeout',
  passwordExpiry: 'passwordExpiry',
  maxLoginAttempts: 'maxLoginAttempts',
  ipWhitelist: 'ipWhitelist',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  priority: 'priority',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.ComplaintScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  restaurantName: 'restaurantName',
  status: 'status',
  roleId: 'roleId',
  profileImage: 'profileImage',
  emailVerificationToken: 'emailVerificationToken',
  resetPasswordToken: 'resetPasswordToken',
  phoneNumber: 'phoneNumber',
  otp: 'otp',
  cuisine: 'cuisine',
  googleId: 'googleId',
  facebookId: 'facebookId',
  restaurantId: 'restaurantId',
  locationId: 'locationId',
  customerType: 'customerType',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  displayName: 'displayName',
  access_area: 'access_area'
};

exports.Prisma.LoginLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  device: 'device',
  location: 'location',
  status: 'status'
};

exports.Prisma.SettingOrderByRelevanceFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category'
};

exports.Prisma.EmailTemplateOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  subject: 'subject',
  body: 'body',
  variables: 'variables',
  description: 'description'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  gender: 'gender',
  preferences: 'preferences',
  language: 'language',
  timezone: 'timezone'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  streetAddress: 'streetAddress',
  apartment: 'apartment',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  label: 'label'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  userId: 'userId',
  address: 'address',
  restaurantId: 'restaurantId',
  status: 'status'
};

exports.Prisma.PaymentMethodOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentMethodId: 'paymentMethodId',
  type: 'type',
  provider: 'provider',
  cardNumber: 'cardNumber',
  cardHolderName: 'cardHolderName',
  billingAddress: 'billingAddress',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  dineInCustomer: 'dineInCustomer',
  orderNumber: 'orderNumber',
  status: 'status',
  currency: 'currency',
  paymentStatus: 'paymentStatus',
  paymentMethodId: 'paymentMethodId',
  shippingAddress: 'shippingAddress',
  billingAddress: 'billingAddress',
  notes: 'notes',
  trackingNumber: 'trackingNumber',
  tableId: 'tableId',
  orderType: 'orderType',
  pickupTime: 'pickupTime',
  specialInstructions: 'specialInstructions',
  otp: 'otp',
  qrCode: 'qrCode',
  locationId: 'locationId',
  customerId: 'customerId'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.MenuCategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  parentId: 'parentId',
  userId: 'userId'
};

exports.Prisma.MenuItemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  tags: 'tags',
  prepTime: 'prepTime',
  categoryId: 'categoryId',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId'
};

exports.Prisma.MenuItemServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  serviceId: 'serviceId'
};

exports.Prisma.MenuItemReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  comment: 'comment',
  menuItemId: 'menuItemId',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.ITAccessOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  role: 'role',
  position: 'position',
  department: 'department',
  note: 'note',
  status: 'status'
};

exports.Prisma.PayrollOrderByRelevanceFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  status: 'status',
  payslipUrl: 'payslipUrl',
  notes: 'notes'
};

exports.Prisma.OvertimeOrderByRelevanceFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  notes: 'notes'
};

exports.Prisma.TipOrderByRelevanceFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  type: 'type',
  notes: 'notes'
};

exports.Prisma.DeductionOrderByRelevanceFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollId: 'payrollId',
  type: 'type',
  description: 'description'
};

exports.Prisma.AttendanceOrderByRelevanceFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.LocationOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  timeZone: 'timeZone',
  address: 'address',
  lat: 'lat',
  lng: 'lng',
  userId: 'userId'
};

exports.Prisma.TableOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  qrCode: 'qrCode',
  restaurantId: 'restaurantId'
};

exports.Prisma.KitchenOrderOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  restaurantId: 'restaurantId',
  staffId: 'staffId',
  assignedBy: 'assignedBy',
  status: 'status',
  notes: 'notes'
};

exports.Prisma.LoyaltyPointOrderByRelevanceFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId',
  orderId: 'orderId'
};

exports.Prisma.NotificationSettingsOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.SecuritySettingsOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionTimeout: 'sessionTimeout',
  passwordExpiry: 'passwordExpiry',
  maxLoginAttempts: 'maxLoginAttempts',
  ipWhitelist: 'ipWhitelist'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority'
};

exports.Prisma.ComplaintOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  resolution: 'resolution'
};

exports.Prisma.ActivityLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};
exports.leaveType = exports.$Enums.leaveType = {
  SickLeave: 'SickLeave',
  AnnualLeave: 'AnnualLeave',
  UnpaidLeave: 'UnpaidLeave',
  Other: 'Other'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  LoginLog: 'LoginLog',
  Setting: 'Setting',
  EmailTemplate: 'EmailTemplate',
  UserProfile: 'UserProfile',
  Address: 'Address',
  Customer: 'Customer',
  PaymentMethod: 'PaymentMethod',
  Order: 'Order',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  MenuCategory: 'MenuCategory',
  MenuItem: 'MenuItem',
  Service: 'Service',
  MenuItemService: 'MenuItemService',
  MenuItemReview: 'MenuItemReview',
  ITAccess: 'ITAccess',
  Employee: 'Employee',
  Payroll: 'Payroll',
  Overtime: 'Overtime',
  Tip: 'Tip',
  Deduction: 'Deduction',
  Attendance: 'Attendance',
  Location: 'Location',
  Table: 'Table',
  KitchenOrder: 'KitchenOrder',
  LoyaltyPoint: 'LoyaltyPoint',
  NotificationSettings: 'NotificationSettings',
  SecuritySettings: 'SecuritySettings',
  Notification: 'Notification',
  Complaint: 'Complaint',
  ActivityLog: 'ActivityLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
